if(Modeltype == 1)
    [A,B,h] = CalcTSModel(gamma);
elseif(Modeltype == 2)
    
end

switch ControlType    
    case 'MozelliTeo6'
        fi=0.01*ones(size(A,2));
        mu=0.1;
        
        
        F = LMI_Teo6Mozelli(A,B,fi,mu)
        
        K = LMI_Teo51 (A,B,fi,mu,in);  
    case 'LQR'
        psi=InitSTATE(8);
        
        K=ControlDesign_LQR(psi);
    case 'openloop'
        K = zeros(4);
        disp('Controller set to open loop')
    otherwise
        K=[];
        disp('The controller you chose is not an option!')
end
SimStruct.sys.sat = Saturation;

SimStruct.controller.type = ControlType;
SimStruct.controller.model.type = Modeltype;
SimStruct.controller.model.A = A;
SimStruct.controller.model.B = B;
SimStruct.controller.model.h = h;
SimStruct.controller.gain    = K;

%% auxiliar functions
function F = LMI_Teo6Mozelli(A,B,fi,mu)
% This implements Theorem 6 on
% "A systematic approach to improve multiple Lyapunov function stability
% and stabilization conditions for fuzzy systems" by
% L. A. Mozelli, R. M. Palhares, G. S. C. Avellar. 2009
% -------------------------------------------------------------------
r = size(B,2);
nA = size(A{1},2);
mB = size(B{1},2);

T = cell(1,r);
Y = sdpvar(nA,nA,'symmetric');
R = sdpvar(nA,nA,'full');
S = cell(1,r);

Tfi = 0;
for i = 1:r
    T{i} = sdpvar(nA,nA,'symmetric');
    S{i} = sdpvar(nA,mB);
    Tfi = Tfi + fi(i)*(T{i}+Y);
end

Csi = cell(r);
Csibarra = cell(r);
for i = 1:r
    for j = 1:r
        star = T{i} - mu*(A{i}*R'-B{i}*S{i}') + R;
        Csi{i,j} = [Tfi-A{i}*R'-R*A{i}'+B{i}*S{i}'+S{i}*B{i}'  star';
            star                            mu*(R+R')];
    end
end

for i = 1:r
    for j = 1:r
        Csibarra{i,j} = Csi{i,j} + Csi{j,i};
    end
end

Restr = [];
for j = 1:r
    for i = 1:j
        Restr = [Restr T{i}>=0 ...
            T{i}+Y>=0 ...
            Csi{i,i} <=0 ...
            Csibarra{i,j}<=0];
    end
end
% Configurando o Solver.
opts=sdpsettings;
opts.verbose=0;

% Resolvendo as LMIs
sol = solvesdp(Restr,[],opts);

% Verifica se as LMI's sao factiveis
p=min(checkset(Restr));
if (p > 0)
    R = double(R);
    Y = double(Y);
    F = cell(1,r);
    for i = 1:r
        T{i} = double(T{i});
        S{i} = double(S{i});
        F{i} = S{i}'/(R');
    end
else
    F=[];
    disp('LMIs Infactiveis')
end
end